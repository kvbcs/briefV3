// ‚úÖ Importation des modules n√©cessaires Angular
import { Component, Output, EventEmitter } from '@angular/core'; // Pour cr√©er le composant et √©mettre des √©v√©nements vers le parent
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms'; // Pour cr√©er et valider un formulaire r√©actif
import { Router } from '@angular/router'; // Pour naviguer entre les routes Angular
import { AuthService } from '../../../core/services/auth.service'; // Service d‚Äôauthentification personnalis√©

// ‚úÖ D√©claration du composant avec m√©tadonn√©es
@Component({
  selector: 'app-login-form', // nom de la balise utilis√©e dans le HTML
  standalone: true,           // composant autonome, sans passer par un module Angular classique
  imports: [ReactiveFormsModule], // modules n√©cessaires pour les formulaires r√©actifs
  templateUrl: './login-form.component.html', // chemin du fichier HTML associ√©
  styleUrls: ['./login-form.component.css']   // chemin du fichier CSS associ√©
})
export class LoginFormComponent {

  // ‚úÖ D√©claration d‚Äôun groupe de contr√¥les de formulaire
  loginForm: FormGroup;

  // ‚úÖ D√©claration d‚Äôun √©v√©nement envoy√© au parent quand l‚Äôutilisateur veut s‚Äôinscrire
  @Output() openSignup = new EventEmitter<void>();

  // ‚úÖ Message affich√© si erreur de connexion
  errorMessage = '';

  // ‚úÖ Injection des services n√©cessaires via le constructeur
  constructor(
    private readonly fb: FormBuilder, // pour construire le formulaire
    private readonly auth: AuthService, // pour appeler l‚ÄôAPI de login
    private readonly router: Router // pour rediriger apr√®s connexion
  ) {
    // ‚úÖ Initialisation du formulaire avec des champs et des validateurs
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]], // champ requis + format email
      password: ['', [Validators.required]] // champ requis
    });
  }

  // ‚úÖ M√©thode appel√©e √† la soumission du formulaire
  onSubmit(): void {
    const { email, password } = this.loginForm.value; // extraction des valeurs

    console.log('üß™ Donn√©es envoy√©es √† l‚ÄôAPI :', { email, password });

    // ‚úÖ Appel du service d‚Äôauthentification
    this.auth.login({ email, password }).subscribe({
      next: () => {
        this.errorMessage = '';
        this.router.navigate(['/profil']); // redirection vers la page profil
      },
      error: (err) => {
        console.error('‚ùå Erreur re√ßue depuis l‚ÄôAPI :', err);
        if (err.status === 400) {
          this.errorMessage = 'Requ√™te invalide : v√©rifiez vos champs.';
        } else if (err.status === 401) {
          this.errorMessage = 'Identifiants incorrects.';
        } else {
          this.errorMessage = 'Erreur inattendue, veuillez r√©essayer.';
        }
      }


    });
  }

  // ‚úÖ M√©thode d√©clench√©e lors du clic sur "Cr√©er un compte"
  onSignupClick(): void {
    this.openSignup.emit(); // envoie un √©v√©nement vers le parent
  }
}
